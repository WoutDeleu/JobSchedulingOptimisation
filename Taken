XXX. oplossingen indienen
XXX. 2 basisoperaties implementeren!! (based on those, expand functionality)
    - algemeen: zoveel mogelijk herbruikbare zaken opsplitsen in afzonderlijke functies
    - enkel de operatie zelf, nog niet nadenken over "goede keuzes" => zie hieronder
        - insert
        - delete
        - swap : volgt uit 2 bovenstaande
               => Swap uitbreiden

2. Local Search
    2.1. x aantal basisoperaties => parameter om mee te spelen
        - operaties "random" gekozen, maar wel met een redenering erachter (GOEDE KEUZES) => niet eerste met laatste swappen

    2.2. calculateStartTimes()
        2.2.1 bereken alle starttijden voor de objecten in de linked list
        2.2.2 smijt die eruit die overlappen met unavailable periods
        2.2.2 feasibleInserts()
              Enkel nog gaten opvullen met jobs die feasible kunnen gepland worden => starttijden moeten niet herberekend worden
              - bij hill climbing om de x keer => parameter
              - bij steepest descent elke iteratie

    2.3. Calculate cost: (as efficient as possible)
    2.4. Undo/Do
        3.4.1 origineel gewoon enkel uitvoeren als de score beter wordt
        3.4.2 Als we lang op plateau zitten (niet verbeteren) toelaten om even een slechtere oplossing door te voeren
              om zo terug nieuwe opties te kunnen verkennen

Extra:
-
- counters to see with margins
- in calculateStartTimes() en calculateCost() enkel berekenen van het gewijzigde gedeelte
        => ZAL VOORAL ZIJN OBV DE VANAF!!!!! (van tot einde....)
- op basis van de lengte van wachtlijst meer inserts of meer deletes gaan doorvoeren
- 3-opt operatie
- ruin en recreate (ruin tussen twee UP' s?)
- zowel steepest decent als hill climbing proberen en zien wat beste resultaat geeft
        => niet veel aan te passen in de code om te wisselen tussen de twee
